qlib_init:
    provider_uri: "~/.qlib/qlib_data/cn_data"
    region: cn
market: &market csi300
benchmark: &benchmark SH000300
data_handler_config: &data_handler_config
    start_time: 2010-01-01
    end_time: 2025-05-15
    fit_start_time: 2010-01-01
    fit_end_time: 2018-12-31
    instruments: *market
    infer_processors:
        - class: FilterCol
          kwargs:
              fields_group: feature
              col_list: ["RESI5", "WVMA5", "RSQR5", "KLEN", "RSQR10", "CORR5", "CORD5", "CORR10", 
                            "ROC60", "RESI10", "VSTD5", "RSQR60", "CORR60", "WVMA60", "STD5", 
                            "RSQR20", "CORD60", "CORD10", "CORR20", "KLOW"
                        ]
        - class: RobustZScoreNorm
          kwargs:
              fields_group: feature
              clip_outlier: true
        - class: Fillna
          kwargs:
              fields_group: feature
    learn_processors:
        - class: DropnaLabel
        - class: CSRankNorm
          kwargs:
              fields_group: label
    label: ["Ref($close, -2) / Ref($close, -1) - 1"] 

port_analysis_config: &port_analysis_config
    strategy:
        class: TopkDropoutStrategy
        module_path: qlib.contrib.strategy
        kwargs:
            signal: <PRED>
            topk: 50
            n_drop: 5
    backtest:
        start_time: 2021-01-01
        end_time: 2025-05-15
        account: 100000000
        benchmark: *benchmark
        exchange_kwargs:
            limit_threshold: 0.095
            deal_price: close
            open_cost: 0.0005
            close_cost: 0.0015
            min_cost: 5
task:
    model:
        class: GeneralPTNN
        module_path: qlib.contrib.model.pytorch_general_nn
        kwargs:
            n_epochs: 6
            lr: 1e-3
            early_stop: 2
            batch_size: 2000
            metric: loss
            loss: mse
            n_jobs: 20
            GPU: 0
            # loss: mse
            # lr: 0.002
            # optimizer: adam
            # batch_size: 8192
            # GPU: 0
            weight_decay: 0.0001
            # pt_model_uri: "qlib.contrib.model.pytorch_nn.Net"
            # pt_model_uri: "env_tpl.model.Net"
            # pt_model_uri: "./model.py:Net"
            pt_model_uri: "model.model_cls"
            pt_model_kwargs: {
                "num_features": 20,
                {% if num_timesteps %}num_timesteps: {{ num_timesteps }}{% endif %}
            }            
                # input_dim: 20
            #   How should I use jinja to put step len here conditionally          
    dataset:
        class: {{ dataset_cls | default("DatasetH") }}
        module_path: qlib.data.dataset
        kwargs:
            handler:
                class: Alpha158
                module_path: qlib.contrib.data.handler
                kwargs: *data_handler_config
            segments:
                train: [ 2010-01-01, 2018-12-31 ]
                valid: [ 2019-01-01, 2020-12-31 ]
                test: [ 2021-01-01, 2025-05-15 ]
            {% if step_len %}step_len: {{ step_len }}{% endif %}
    record: 
        - class: SignalRecord
          module_path: qlib.workflow.record_temp
          kwargs: 
            model: <MODEL>
            dataset: <DATASET>
        - class: SigAnaRecord
          module_path: qlib.workflow.record_temp
          kwargs: 
            ana_long_short: False
            ann_scaler: 252
        - class: PortAnaRecord
          module_path: qlib.workflow.record_temp
          kwargs: 
            config: *port_analysis_config
